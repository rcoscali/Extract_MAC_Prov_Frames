#!/usr/bin/env node

/**
 * Module dependencies.
 */

/**
 * ./bin/keystore --init 
 * ./bin/keystore --persist-account --iban FR76928836647839290734 --currencyId 1 --bankId 2
 * ./bin/keystore --persist-currency --longName 'Bath thaïlandais' --symbol '฿' --code THB
 * ./bin/keystore --persist-bank --longName 'Crédit mutuel' --code CMU --bic CRMUFRPP
 * ./bin/keystore --persist-statement --electronicSeqNr 226 --creationDateTime '2022-09-08 21:30:43' --accountId 3 --balanceId 1
 * ./bin/keystore --persist-balance --typeCodeId 2 --proprietaryType HGDF --subTypeCodeId 3 --ammount 25432.76 --creditDebit 'credit' --dateTime '2022-09-08 21:30:43' --numberOfEntries 8 --sumOfEntries 2543.65
 * ./bin/keystore --account-by-iban --iban FR76928836647839290734
 * ./bin/keystore --currency-by-code --code EUR
 * ./bin/keystore --currency-by-symbol --symbol $
 */

// Use db.js app: openDb
var keystore = require('../db');
// Debug
var debug = require('debug')('mac_prov_extract,express,keystore:*');
// FS API
var fs = require('fs');
// Child process for running system commands
const { exec } = require("child_process");

function printHelp() {
    console.log("keystore: Usage: keystore [OPTIONS] [COMMAND] [ARGUMENTS]");
    console.log("                     This script provides maintainance features for the web application. More");
    console.log("                     specifically it provides database initialization features and all persistent");
    console.log("                     objects manipulations.");
    console.log("                     OPTIONS:");
    console.log("                              -v|--verbose             be more verbose when running.");
    console.log("                              -h|--help                display this help message.");
    console.log("                     COMMAND:");
    console.log("                              -I|--init-db             create and initialize database file.");
    console.log("                              -D|--dump-db             dump database file to 'keystore.sql'.");
    console.log("                              -R|--restore-db          restore database from 'keystore.sql' SQL file.");
    console.log("                              ");
    console.log("                           >/ -A|--persist-account     create an Account persistent object in database.");
    console.log("                           >/ -C|--persist-currency    create an  persistent object in database.");
    console.log("                           >/ -B|--persist-bank        create an  persistent object in database.");
    console.log("                           >/ -S|--persist-statement   create an  persistent object in database.");
    console.log("                           >/ -L|--persist-balance     create an  persistent object in database.");
    console.log("                           >/ -T|--persist-balance-type-code");
    console.log("                                                       create an  persistent object in database.");
    console.log("                           >/ -E|--persist-entry       create an  persistent object in database.");
    console.log("                           >/ -K|--persist-status-code create an  persistent object in database.");
    console.log("                              ");
    console.log("                              ");
    console.log("                           >/ -a|--account-by-iban     read an Account persistent object from DB with Iban");
    console.log("                           >/ -c|--currency-by-code    read a Currency persistent object from DB with Code");
    console.log("                           >/ -s|--currency-by-symbol  read a Currency persistent object from DB with Symbol");
    console.log("                           >/ -b|--bank-by-bic         read a Bank persistent object from DB with BIC");
    console.log("                           >/ -t|--statement-by-seqnum read a Statement persistent object from DB with ElectronicSeqNumber");
    console.log("                              ");
    console.log("                     ARGUMENTS:");
    console.log("                              --id                     provide a persistent object 'id' value");
    console.log("                              --iban                   provide a persistent object 'Iban' value");
    console.log("                              --bankId                 provide a persistent object 'BankId' value");
    console.log("                              --currencyId             provide a persistent object 'CurrencyId' value");
    console.log("                              --longName               provide a persistent object 'LongName' value");
    console.log("                              --symbol                 provide a persistent object 'Symbol' value");
    console.log("                              --code                   provide a persistent object 'Code' value");
    console.log("                              --bic                    provide a persistent object 'BIC' value");
    console.log("                              --electronicSeqNr        provide a persistent object 'ElectronicSeqNr' value");
    console.log("                              --creationDateTime       provide a persistent object 'CreationDateTime' value");
    console.log("                              --accountId              provide a persistent object 'AccountId' value");
    console.log("                              --balanceId              provide a persistent object 'BalanceId' value");
    console.log("                              --typeCodeId             provide a persistent object 'TypeCodeId' value");
    console.log("                              --proprietaryType        provide a persistent object 'ProprietaryType' value");
    console.log("                              --subTypeCodeId          provide a persistent object 'SubTypeCodeId' value");
    console.log("                              --ammount                provide a persistent object 'Ammount' value");
    console.log("                              --creditDebit            provide a persistent object 'CreditDebit' value");
    console.log("                              --dateTime               provide a persistent object 'DateTime' value");
    console.log("                              --numberOfEntries        provide a persistent object 'NumberOfEntries' value");
    console.log("                              --sumOfEntries           provide a persistent object 'SumOfEntries' value");
    console.log("                              ");
    console.log("              Copyright © 2022 Rémi COHEN SCALI");
}

function doInitDB()
{
    /* Delete the file */
    console.log('Deleting DB file '+sqlitedb_filepath+' ...');
    fs.unlink(sqlitedb_filepath,
	      (err) =>
	      {
		  if (err &&
		      (err.code != 'ENOENT' || err.errno != -4058))
		      throw err;
		  else if (err && err.code == 'ENOENT' && err.errno == -4058)
		      console.log('Delete DB file: no such file or directory: done!');
		  else
		      console.log('Delete DB file: done!');
		  
		  console.log('initdb: open DB ...');
		  keystore.openDb();
		  keystore.keystore.serialize(() =>
		      {
			  /* Create tables & records for initializing DB */
			  console.log("initdb: Creating tables schema in DB ...");
			  keystore.keystore.run("PRAGMA foreign_keys = ON;")
			  /*
			   * BEGIN TRANSACTION
			   */
			  console.log("initdb: Opening transaction ...");
			  keystore.keystore.run("BEGIN TRANSACTION;");
			  /*
			   * Table Accounts
			   */
			  console.log("initdb: Create table 'LogFiles' ...");
			  keystore.keystore.run("CREATE TABLE IF NOT EXISTS LogFiles   (id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,             \
                                                                                        Name            TEXT    DEFAULT 'Log-Doe' NOT NULL,                     \
                                                                                        LogDate         TEXT    DEFAULT 0,                                      \
                                                                                        ImportDate      TEXT    DEFAULT 0 NOT NULL,                             \
                                                                                        UUID            TEXT    DEFAULT '00000000-0000-0000-0000-000000000000', \
                                                                                        Version         TEXT    DEFAULT '0.0',                                  \
                                                                                        LinesNb         INTEGER DEFAULT 0,                                      \
                                                                                        Size            INTEGER DEFAULT 0,                                      \
                                                                                        Content         BLOB,                                                   \
                                                                                        FramesExtracted BOOLEAN DEFAULT 0 NOT NULL,                             \
                                                                                        SecuredFramesExtracted BOOLEAN DEFAULT 0 NOT NULL,                      \
                                                                                        UNIQUE(id))");
			  console.log("initdb: Table 'LogFiles' created!");
			  /*
			   * Table SecuredFrames
			   */
			  console.log("initdb: Create table 'SecuredFrames' ...");
			  keystore.keystore.run("CREATE TABLE IF NOT EXISTS SecuredFrames (id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,             \
                                                                                           Name            TEXT NOT NULL,                                          \
                                                                                           TimeStamp       TEXT NOT NULL,                                          \
                                                                                           FrameId         INTEGER NOT NULL,                                       \
                                                                                           tMAC            TEXT,                                                   \
                                                                                           Payload         TEXT,                                                   \
                                                                                           FV              TEXT,                                                   \
                                                                                           Lsb             TEXT,                                                   \
                                                                                           Pad             TEXT,                                                   \
                                                                                           UNIQUE(id))");
			  console.log("initdb: Table 'SecuredFrames' created!");
			  /*
			   * Table MACProvFrames
			   */
			  console.log("initdb: Create table 'MACProvFrames' ...");
			  keystore.keystore.run("CREATE TABLE IF NOT EXISTS MACProvFrames (id              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, \
                                                                                           LogFileId       INTEGER,                                    \
                                                                                           Frame           TEXT,                                       \
                                                                                           SHECmdExtracted BOOLEAN DEFAULT 0 NOT NULL,                 \
                                                                                           FOREIGN KEY (LogFileId) REFERENCES LogFiles (id),           \
                                                                                           UNIQUE(id))");
			  console.log("initdb: Table 'MACProvFrames' created!");
			  /*
			   * Table SHEArgsPackets
			   */
			  console.log("initdb: Create 'SHEArgsPackets' table ...");
			  keystore.keystore.run("CREATE TABLE IF NOT EXISTS SHEArgsPackets (id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,     \
                                                                                            MACProvFrameId INTEGER,                                        \
                                                                                            M2             TEXT,                                           \
                                                                                            KeysExtracted  BOOLEAN DEFAULT 0 NOT NULL,                     \
                                                                                            FOREIGN KEY (MACProvFrameId) REFERENCES MACProvFrames (id),    \
                                                                                            UNIQUE(id))");
			  console.log("initdb: Table 'SHEArgsPackets' created!");
			  /*
			   * Table MACKeys
			   */
			  console.log("initdb: Create 'MACKeys' table ...");
			  keystore.keystore.run("CREATE TABLE IF NOT EXISTS MACKeys        (id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,    \
                                                                                            MACProvFrameId INTEGER,                                       \
                                                                                            MacKey         TEXT,                                          \
                                                                                            cid            TEXT,                                          \
                                                                                            fid            TEXT,                                          \
                                                                                            IsMaster       BOOLEAN DEFAULT 0 NOT NULL,                    \
                                                                                            UNIQUE(id))");
			  console.log("initdb: Table 'MACKeys' created!");
			  /*
			   * Table ActiveKeys
			   */
			  console.log("initdb: Create 'ActiveKeys' table ...");
			  keystore.keystore.run("CREATE TABLE ActiveKeys                   (id           INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,    \
                                                                                            MacEcu       TEXT,    \
                                                                                            MasterEcu    TEXT,    \
                                                                                            UNIQUE(id))");
			  console.log("initdb: Table 'ActiveKeys' created!");
			  /*
			   * Table ECUs
			   */
			  console.log("initdb: Create 'ECUs' table ...");
			  keystore.keystore.run("CREATE TABLE ECUs (id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,    \
                                                                    Name           TEXT,                                          \
                                                                    IsDomainMaster BOOLEAN NOT NULL,                              \
                                                                    DomainMasterId INTEGER,                                       \
                                                                    UNIQUE(id))");
                          // Ecu		Master
                          //
                          // ADAS		ADAS
                          // FRCAMERA		ADAS
                          // SONAR		ADAS      
                          // ACU		BCM
                          // BCM		BCM
                          // BMS12V		BCM
                          // HFM		BCM
                          // HVAC		BCM
                          // METER		BCM
                          // USM		BCM
                          // CDM		CDM
                          // EPKB		CDM
                          // EPS		CDM
                          // STRG		CDM
                          // VDC		CDM
                          // ATCU		ECM
                          // ECM     		ECM
                          // HEVC		HEVC
                          keystore.keystore.run("INSERT INTO ECUs VALUES(1, 'ADAS', 1, 0)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(2, 'FRCAMERA', 0, 1)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(3, 'SONAR', 0, 1)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(4, 'ACU', 0, 5)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(5, 'BCM', 1, 0)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(6, 'BMS12V', 0, 5)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(7, 'HFM', 0, 5)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(8, 'HVAC', 0, 5)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(9, 'METER', 0, 5)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(10, 'USM', 0, 5)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(11, 'CDM', 1, 0)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(12, 'EPKB', 0, 11)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(13, 'EPS', 0, 11)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(14, 'STRG', 0, 11)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(15, 'VDC', 0, 11)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(16, 'ATCU', 0, 17)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(17, 'ECM', 1, 0)");
                          keystore.keystore.run("INSERT INTO ECUs VALUES(18, 'HEVC', 1, 0)");
			  console.log("initdb: Table 'ECUs' created!");
			  /*
			   * COMMIT
			   */
			  keystore.keystore.run("COMMIT;");
		      }
		  );
	      });
}

function doDumpSchema()
{
    fs.unlink("keystore.sql", (err) => {});
    exec("sqlite3 -batch -init dumpschema.sql "+sqlitedb_filepath+" .quit",
         (error, stdout, stderr) =>
	 {
             if (error)
	     {
                 console.log('error: '+error.message);
                 return;
             }
             if (stderr)
	     {
                 console.log('stderr: '+stderr);
                 return;
             }
             console.log('stdout: '+stdout);
             console.log('dumpdb: Database dumped into keystore.sql!');
             exec("dos2unix keystore.sql", (error, stdout, stderr) => {
                 if (error)
		 {
                     console.log('error: '+error.message);
                     return;
                 }
                 if (stderr)
                     console.log(stderr);
                 else
                     console.log(stdout);
                 exec("cat keystore.sql", (error, stdout, stderr) =>
		     {
			 if (error)
			 {
                             console.log('error: '+error.message);
                             return;
			 }
			 if (stderr)
			 {
                             console.log('stderr: '+stderr);
                             return;
			 }
			 console.log('=========================================================================================================');
			 console.log(stdout);
			 console.log('=========================================================================================================');
                     });
             });
         }
        );
}

function doDumpDB()
{
    fs.unlink("keystore.sql", (err) => {});
    exec(
        "sqlite3 -batch -init dump.sql "+sqlitedb_filepath+" .quit",
        (error, stdout, stderr) =>
	{
            if (error)
	    {
                console.log('error: '+error.message);
                return;
            }
            if (stderr)
	    {
                console.log('stderr: '+stderr);
                return;
            }
            console.log('stdout: '+stdout);
            console.log('dumpdb: Database dumped into keystore.db.sql!');
            exec(
                "dos2unix keystore.db.sql",
                (error, stdout, stderr) =>
                {
                    if (error)
		    {
                        console.log('error: '+error.message);
                        return;
                    }
                    if (stderr)
                        console.log(stderr);
                    else
                        console.log(stdout);
                    exec(
                        "cat keystore.db.sql | tail -40",
                        (error, stdout, stderr) =>
		        {
			    if (error)
			    {
                                console.log('error: '+error.message);
                                return;
			    }
			    if (stderr)
			    {
                                console.log('stderr: '+stderr);
                                return;
			    }
			    console.log('=========================================================================================================');
			    console.log(stdout);
			    console.log('=========================================================================================================');
                        }
                    );
                }
            );
        }
    );
}

function doRestoreDB()
{
    /* Delete the file */
    console.log('Deleting DB file '+sqlitedb_filepath+' ...');
    fs.unlink(sqlitedb_filepath,
	      (err) =>
	      {
		  if (err && (err.code != 'ENOENT' || err.errno != -4058))
		      throw err;
		  else if (err && err.code == 'ENOENT' && err.errno == -4058)
		      console.log('Delete DB file: no such file or directory: done!');
		  else
		      console.log('Delete DB file: done!');

		  exec("sqlite3 -batch -init keystore.db.sql "+sqlitedb_filepath+" .quit",
		       (error, stdout, stderr) =>
		       {
			   if (error)
			   {
			       console.log('error: '+error.message);
			       return;
			   }
			   if (stderr)
			   {
			       console.log('stderr: '+stderr);
			       return;
			   }
			   console.log('stdout: '+stdout);
			   fs.unlink("keystore.sql", (err) => {});
		       });
	      });
}

/**
 * Delete SQLite DB File
 */

console.log('initdb: argc = '+process.argv.length+' ...');
let argc = 0;
process.argv.forEach(element => console.log('initdb: argv['+(argc)+'] = '+process.argv[(argc++)]+' ...'));

if (process.env.MAC_PROV_ROOT == undefined) {
    throw ('Invalid or unset MAC_PROV_ROOT env var !');
}

/* SQLite DB file path */
//var sqlitedb_filepath = process.env.HOME + '\\AppData\\Local\\rapr\\accounting.db';
var sqlitedb_filepath = process.env.MAC_PROV_ROOT + '/var/lib/keystore.db';
argc = 0;
var flags = new Object;
var commandString  = '';
flags = {
    /* Options flags*/
    verboseFlag: 0,
    helpFlag: 0,
    
    /* Init functions flags */
    initDbFlag: 0,
    dumpDbFlag: 0,
    dumpFullDbFlag: 0,
    restoreDbFlag: 0,

    /* id flag for object id's */
    idFlag: 0,
    
    /* persistAccount */
    persistAccountFlag: 0,
    ibanFlag: 0,
    iban: '',
    bankIdFlag: 0,
    bankId: 0,
    currencyIdFlag: 0,
    currencyId: 0,

    /* deleteAccount */
    deleteAccountFlag: 0,

    /* persistCurrency */
    persistCurrencyFlag: 0,
    longNameFlag: 0,
    longName: '',
    symbolFlag: 0,
    symbol: '',
    codeFlag: 0,
    code: '',

    /* deleteCurrency */
    deleteCurrencyFlag: 0,

    /* persistBank */
    persistBankFlag: 0,
    // LongNameFlag: 0,
    // longName: 0,
    // codeFlag: 0,
    // code: 0,
    bicFlag: 0,
    bic: '',

    /* deleteBank */
    deleteBankFlag: 0,

    /* persistStatement */
    persistStatementFlag: 0,
    electronicSeqNrFlag: 0,
    creationDateTimeFlag: 0,
    accountIdFlag: 0,
    balanceIdFlag: 0,
    
    /* deleteStatement */
    deleteStatementFlag: 0,

    /* persistBalance */
    persistBalanceFlag: 0,
    typeCodeIdFlag: 0,
    typeCodeId: 0,
    proprietaryTypeFlag: 0,
    proprietaryType: 0,
    subTypeCodeIdFlag: 0,
    subTypeCodeId: 0,
    ammountFlag: 0,
    ammount: 0,
    creditDebitFlag: 0,
    creditDebit: '',
    dateTimeFlag: 0,
    dateTime: '',
    numberOfEntriesFlag: 0,
    numberOfEntries: 0,
    sumOfEntriesFlag: 0,
    sumOfEntries: 0,
    
    /* deleteBalance */
    deleteBalanceFlag: 0,

    /* persistBalanceTypeCode */
    persistBalanceTypeCodeFlag: 0,
    // codeFlag: 0,
    descriptionFlag: 0,
    description: '',

    /* deleteBalanceTypeCode */
    deleteBalanceTypeCodeFlag: 0,

    /* persistEntry */
    persistEntryFlag: 0,
    entryRefFlag: 0,
    // ammountFlag: 0,
    // creditDebitFlag: 0,
    // currencyIdFlag: 0,
    reversalIndicatorFlag: 0,
    statusCodeIdFlag: 0,
    bookingDateTimeFlag: 0,
    valueDateTime: 0,
    
    /* deleteEntry */
    deleteEntryFlag: 0,

    /* persistStatusCode */
    persistStatusCodeFlag: 0,
    // codeFlag: 0,
    // descriptionFlag: 0

    /* deleteStatusCode */
    deleteStatusCodeFlag: 0,

    /* getter options flags */
    accountByIbanFlag: 0,
    currencyByCodeFlag: 0,
    currencyBySymbolFlag: 0,
    bankByBicFlag: 0
};

var commandString = '';
for (let i = 2; i < process.argv.length; i++)
{    
    /**
     * --verbose | -v
     */
    if (process.argv[i] === "--verbose" || process.argv[i] === "-v")
    {
        var numberRE = '/[0-9]+/';
        if (process.argv[i+1].match(numberRE))
            flags.verboseFlag += process.argv[++i];
        else
            flags.verboseFlag++;
        console.log("[keystore] verbose = %d", flags.verboseFlag);
    }

    /**
     * --help | -h
     */
    if (process.argv[i] === "--help" || process.argv[i] === "-h")
    {
        flags.initDbFlag++;
        commandString = '--help';
        console.log("[keystore] %s", commandString);
        printHelp();
        process.exit(1);
    }

    /**
     * --init-db | -I
     */
    if (process.argv[i] === "--init-db" || process.argv[i] === "-I")
    {
        flags.initDbFlag++;
        commandString = '--init-db';
        console.log("[keystore] %s", commandString);
        doInitDB();
    }

    /**
     * --dump-db | -d
     */
    else if (process.argv[i] === "--dump-db" || process.argv[i] === "-d")
    {
        flags.dumpDbFlag++;
        commandString = '--dump-db';
        console.log("[keystore] %s", commandString);
        doDumpSchema();
    }

    /**
     * --dump-full-db | -D
     */
    else if (process.argv[i] === "--dump-full-db" || process.argv[i] === "-D")
    {
        flags.dumpFullDbFlag++;
        commandString = '--dump-full-db';
        console.log("[keystore] %s", commandString);
        doDumpDB();
    }

    /**
     * --restore-db | -R
     */
    else if (process.argv[i] === "--restore-db" || process.argv[i] === "-R")
    {
        flags.restoreDbFlag++;
        commandString = "--restore-db";
        console.log("[keystore] %s", commandString);
        doRestoreDB();
    }
    
    /** --id */
    else if (process.argv[i] === "--id")
    {
        flags.idFlag++;
        flags.id = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.id);
    }

    /**
     * --persist-account | -A
     */
    else if (process.argv[i] === "--persist-account" || process.argv[i] === "-A")
    {
        commandString = "--persist-account";
        console.log("[keystore] %s", commandString);
        flags.persistAccountFlag++;
    }

    /** --iban */
    else if (process.argv[i] === "--iban")
    {
        flags.ibanFlag++;
        flags.iban = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.iban);
    }

    /** --bankId */
    else if (process.argv[i] === "--bankId")
    {
        flags.bankIdFlag++;
        flags.bankId = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.bankId);
    }

    /** --currencyId */
    else if (process.argv[i] === "--currencyId")
    {
        flags.currencyIdFlag++;
        flags.currencyId = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.currencyId);
    }

    /**
     * --persist-currency | -C
     */
    else if (process.argv[i] === "--persist-currency" || process.argv[i] === "-C")
    {
        commandString = "--persist-currency";
        flags.persistCurrencyFlag++;
        console.log("[keystore] %s", commandString);
    }

    /** --longName */
    else if (process.argv[i] === "--longName")
    {
        flags.longNameFlag++;
        flags.longName = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.longName);
    }

    /** --symbol */
    else if (process.argv[i] === "--symbol")
    {
        flags.symbolFlag++;
        flags.symbol = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.symbol);
    }

    /** --code */
    else if (process.argv[i] === "--code")
    {
        flags.codeFlag++;
        flags.code = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.code);
    }

    /**
     * --persist-bank | -B
     */
    else if (process.argv[i] === "--persist-bank" || process.argv[i] === "-B")
    {
        commandString = "--persist-bank";
        console.log("[keystore] %s", commandString);
        flags.persistBankFlag++;
    }

    /** --bic */
    else if (process.argv[i] === "--bic")
    {
        flags.bicFlag++;
        flags.bic = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.bic);
    }

    /**
     * --persist-statement | -S
     */
    else if (process.argv[i] === "--persist-statement" || process.argv[i] === "-S")
    {
        commandString = "--persist-statement";
        flags.persistStatementFlag++;
        console.log("[keystore] %s", commandString);
    }

    /** --electronicSeqNr */
    else if (process.argv[i] === "--electronicSeqNr")
    {
        flags.electronicSeqNrFlag++;
        flags.electronicSeqNr = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.electronicSeqNr);
    }

    /** --creationDateTime */
    else if (process.argv[i] === "--creationDateTime")
    {
        flags.creationDateTimeFlag++;
        flags.creationDateTime = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.creationDateTime);
    }

    /** --accountId */
    else if (process.argv[i] === "--accountId")
    {
        flags.accountIdFlag++;
        flags.accountId = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.accountId);
    }

    /** --balanceId */
    else if (process.argv[i] === "--balanceId")
    {
        flags.balanceIdFlag++;
        flags.balanceId = process.argv[i+1];
        console.log("[keystore] %s --balanceId "+flags.balanceId);
    }

    /**
     * --persist-balance | -L
     */
    else if (process.argv[i] === "--persist-balance" || process.argv[i] === "-L")
    {
        commandString = "--persist-balance";
        flags.persistBalanceFlag++;
        console.log("[keystore] %s", commandString);
    }

    /** --typeCodeId */
    else if (process.argv[i] === "--typeCodeId")
    {
        flags.typeCodeIdFlag++;
        i++;
        flags.typeCodeId = process.argv[i+1];
        console.log("[keystore] %s --typeCodeId %s", process.argv[i++], commandString, flags.typeCodeId);
    }

    /** --proprietaryType */
    else if (process.argv[i] === "--proprietaryType")
    {
        flags.proprietaryTypeFlag++;
        flags.proprietaryType = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.proprietaryType);
    }

    /** --subTypeCodeId */
    else if (process.argv[i] === "--subTypeCodeId")
    {
        flags.subTypeCodeIdFlag++;
        flags.subTypeCodeId = process.argv[i+1];
        console.log("[keystore] %s %s ", commandString, process.argv[i++], flags.subTypeCodeId);
    }

    /** --ammount */
    else if (process.argv[i] === "--ammount")
    {
        flags.ammountFlag++;
        flags.ammount = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.ammount);
    }

    /** --creditDebit */
    else if (process.argv[i] === "--creditDebit")
    {
        flags.creditDebitFlag++;
        flags.creditDebit = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.creditDebit);
    }

    /** --dateTime */
    else if (process.argv[i] === "--dateTime")
    {
        flags.dateTimeFlag++;
        flags.dateTime = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.dateTime);
    }

    /** --numberOfEntries */
    else if (process.argv[i] === "--numberOfEntries")
    {
        flags.numberOfEntriesFlag++;
        flags.numberOfEntries = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.numberOfEntries);
    }

    /** --sumOfEntries */
    else if (process.argv[i] === "--sumOfEntries")
    {
        flags.sumOfEntriesFlag++;
        flags.sumOfEntries = process.argv[i+1];
        console.log("[keystore] %s %s %s", commandString, process.argv[i++], flags.sumOfEntries);
    }

    /**
     * --account-by-iban | -a
     */
    else if (process.argv[i] === "--account-by-iban" || process.argv[i] === "-a")
    {
        commandString = "--account-by-iban";
        flags.accountByIbanFlag++;
        console.log("[keystore] %s", commandString);
    }

    /**
     * --currency-by-code | -c
     */
    else if (process.argv[i] === "--currency-by-code" || process.argv[i] === "-c")
    {
        commandString = "--currency-by-code";
        flags.currencyByCodeFlag++;
        console.log("[keystore] %s", commandString);
    }

    /**
     * --currency-by-symbol | -s
     */
    else if (process.argv[i] === "--currency-by-symbol" || process.argv[i] === "-s")
    {
        commandString = "--currency-by-symbol";
        flags.currencyBySymbolFlag++;
        console.log("[keystore] %s", commandString);
    }

    /**
     * --persist-balance-type-code | -T
     */
    else if (process.argv[i] === "--persist-balance-type-code" || process.argv[i] === "-T")
    {
        commandString = "--persist-balance-type-code";
        console.log("[keystore] --persist-balance-type-code", commandString);
        flags.persistBalanceTypeCodeFlag++;
    }

    /**
     * --persist-entry | -E
     */
    else if (process.argv[i] === "--persist-entry" || process.argv[i] === "-E")
    {
        commandString = "--persist-entry";
        console.log("[keystore] %s", commandString);
        flags.persistEntryFlag++;
    }

    /**
     * --persist-status-code | -K
     */
    else if (process.argv[i] === "--persist-status-code" || process.argv[i] === "-K")
    {
        commandString = "--persist-status-code";
        console.log("[keystore] %s", commandString);
        flags.persistStatusCodeFlag++;
    }

    /**
     * Errors
     */
    else
    {
        console.log('keystore: invalid arg: process.argv['+i+'] = '+process.argv[i]+' ...');
    }
}

console.log("*> [keystore] %s", commandString);

/**
 * Handle missing args errors
 */
if ((flags.persistAccountFlag && !(flags.ibanFlag && flags.bankIdFlag && flags.currencyIdFlag)) ||
    (flags.persistCurrencyFlag && !(flags.longNameFlag && flags.symbolFlag && flags.codeFlag)) ||
    (flags.persistBankFlag && !(flags.longNameFlag && flags.codeFlag && flags.bicFlag)) ||
    (flags.deleteBank && !flags.idFlag) ||
    (flags.persistStatementFlag && !(flags.electronicSeqNrFlag && flags.creationDateTimeFlag && flags.accountIdFlag && flags.balanceIdFlag)) ||
    (flags.persistBalanceFlag && !(flags.typeCodeIdFlag && flags.proprietaryTypeFlag &&
                                   flags.subTypeCodeIdFlag && flags.ammountFlag &&
                                   flags.creditDebitFlag && flags.numberOfEntries &&
                                   flags.sumOfEntries)) ||
    (flags.accountByIbanFlag && !flags.ibanFlag) ||
    (flags.currencyByCodeFlag && !flags.codeFlag) ||
    (flags.currencyBySymbolFlag && !flags.symbolFlag)
   )
{
    console.error("[keystore] %s: Error: Missing argument!", commandString);
    printHelp();
    process.exit(1);
}
/**
 * persistAccount
 */
else if (flags.persistAccountFlag && flags.ibanFlag && flags.bankIdFlag && flags.currencyIdFlag)
{
    flags.persistAccountFlag--;
    keystore.params.iban = flags.iban;
    flags.ibanFlag--;
    keystore.params.bankId = flags.bankId;
    flags.bankIdFlag--;
    keystore.params.currencyId = flags.currencyId;
    flags.currencyIdFlag--;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const persistPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.persistAccount());
    }, 20)});
    openPromise.then(persistPromise);
}
/**
 * persistCurrency
 */
else if (flags.persistCurrencyFlag && flags.longNameFlag && flags.symbolFlag && flags.codeFlag)
{
    flags.persistCurrencyFlag--;
    keystore.params.longName = flags.longName;
    flags.longNameFlag--;
    keystore.params.symbol = flags.symbol;
    flags.symbolFlag--;
    keystore.params.code = flags.code;
    flags.codeFlag--;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const persistPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.persistCurrency());
    }, 20)});
    openPromise.then(persistPromise);   
}
/**
 * persistBank
 */
else if (flags.persistBankFlag && flags.longNameFlag && flags.codeFlag && flags.bicFlag)
{
    flags.persistBankFlag--;
    keystore.params.longName = flags.longName;
    flags.longNameFlag--;
    keystore.params.code = flags.code;
    flags.codeFlag--;
    keystore.params.bic = flags.bic;
    flags.bicFlag--;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const persistPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.persistBank());
    }, 20)});
    openPromise.then(persistPromise);   
}
/**
 * deleteCurrency
 */
else if (flags.deleteBank && flags.idFlag) {
}
/**
 * persistStatement
 */
else if (flags.persistStatementFlag && flags.electronicSeqNrFlag &&
         flags.creationDateTimeFlag && flags.accountIdFlag && flags.balanceIdFlag) {
    flags.persistStatementFlag--;
    keystore.params.electronicSeqNr = flags.electronicSeqNr;
    flags.electronicSeqNrFlag--;
    keystore.params.creationDateTime = flags.creationDateTime;
    flags.creationDateTimeFlag--;
    keystore.params.accountId = flags.accountId;
    flags.accountIdFlag--;
    keystore.params.balanceId = flags.balanceId;
    flags.balanceIdFlag--;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const persistPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.persistStatement());
    }, 20)});
    openPromise.then(persistPromise);   
}
/**
 * persistBalance
 */
else if (flags.persistBalanceFlag && flags.typeCodeIdFlag &&
         flags.proprietaryTypeFlag && flags.subTypeCodeIdFlag &&
         flags.ammountFlag && flags.creditDebitFlag && flags.numberOfEntries && flags.sumOfEntries) {
    flags.persistBalanceFlag--;
    keystore.params.typeCodeId = flags.typeCodeId;
    flags.typeCodeIdFlag--;
    keystore.params.proprietaryType = flags.proprietaryType;
    flags.proprietaryTypeFlag--;
    keystore.params.subTypeCodeId = flags.subTypeCodeId;
    flags.subTypeCodeIdFlag--;
    keystore.params.ammount = flags.ammount;
    flags.ammountFlag--;
    keystore.params.creditDebit = flags.creditDebit;
    flags.creditDebitFlag--;
    if (flags.dateTimeFlag > 0) {
        keystore.params.dateTime = flags.dateTime;
        flags.dateTimeFlag--;
    }
    else
        keystore.params.dateTime = '0';
    keystore.params.numberOfEntries = flags.numberOfEntries;
    flags.numberOfEntriesFlag--;
    keystore.params.sumOfEntries = flags.sumOfEntries;
    flags.sumOfEntriesFlag--;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const persistPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.persistBalance());
    }, 20)});
    openPromise.then(persistPromise);
}
/**
 * accountByIban
 */
else if (flags.accountByIbanFlag && flags.ibanFlag) {
    keystore.params.iban = flags.iban;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const queryPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.getAccountByIban());
    }, 50)});
    openPromise.then(queryPromise);
}
/**
 * currencyByCode
 */
else if (flags.currencyByCodeFlag && flags.codeFlag) {
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const queryPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.getCurrencyByCode(flags.code));
    }, 50)});
    openPromise.then(queryPromise);
}
/**
 * currencyBySymbol
 */
else if (flags.currencyBySymbolFlag && flags.symbolFlag) {
    keystore.params.symbol = flags.symbol;
    var openPromise = new Promise((resolve, reject) => {resolve(keystore.openDb())});
    const queryPromise = new Promise((resolve, reject) => {setTimeout(() => {
        resolve(keystore.getCurrencyBySymbol());
    }, 50)});
    openPromise.then(queryPromise);
}
console.log("***>===============================<***");
